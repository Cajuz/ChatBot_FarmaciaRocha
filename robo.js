const qrcode = require("qrcode-terminal")
const { Client, MessageMedia } = require("whatsapp-web.js")
const fs = require("fs")
const path = require("path")
const client = new Client()

// Armazenamento de dados (em produ√ß√£o, use um banco de dados)
let usuarios = {}
let pedidos = {}
let conversas = {}
let atendentesAtivos = {}; // Novo: { "atendenteId": "conversationId" }

// Configura√ß√µes da farm√°cia
const FARMACIA_CONFIG = {
  nome: "Farm√°cia Rocha",
  endereco: "Povoado de Raspador, Pra√ßa do mercado - Ribeira do Amparo - BA",
  telefone: "(81) 9850-8538",
  horarios: {
    segunda_sabado: "08:00 √†s 12:00 e 14:00 √†s 18:30",
  },
  entrega: {
    taxa: "R$ 5,00",
    tempo: "30 a 60 minutos",
    raio: "5km",
  },
  atendentes: [
    "5511947015576@c.us", // Substitua pelos n√∫meros reais dos atendentes
    // Adicione mais atendentes aqui, ex: "5521987654321@c.us"
  ],
  // NOVO: Mapeamento de IDs de atendentes para seus nomes
  nomesAtendentes: {
    "5511947015576@c.us": "Alvaro", // Exemplo: "ID_DO_ATENDENTE@c.us": "Nome do Atendente"
    // Adicione outros atendentes aqui conforme necess√°rio
  },
}

// Estados da conversa
const ESTADOS = {
  INICIAL: "inicial",
  MENU_PRINCIPAL: "menu_principal",
  CADASTRO: "cadastro",
  PEDIDO: "pedido",
  ENTREGA_RETIRADA: "entrega_retirada",
  FINALIZANDO: "finalizando",
  AGUARDANDO_ATENDENTE: "aguardando_atendente",
  VISUALIZANDO_INFO: "visualizando_info",
}

client.on("qr", (qr) => {
  qrcode.generate(qr, { small: true })
  console.log("Escaneie o QR Code para conectar o WhatsApp")
})

client.on("ready", () => {
  console.log("ü§ñ Bot da Farm√°cia Rocha conectado e funcionando!")
  carregarDados()
  // Inicia a verifica√ß√£o de sess√µes inativas a cada 10 minutos
  setInterval(checkInactiveSessions, 10 * 60 * 1000); 
})

client.initialize()

const delay = (ms) => new Promise((res) => setTimeout(res, ms))

// Fun√ß√£o para obter sauda√ß√£o baseada no hor√°rio
function obterSaudacao() {
  const hora = new Date().getHours()
  if (hora >= 6 && hora < 12) return "Bom dia"
  if (hora >= 12 && hora < 18) return "Boa tarde"
  return "Boa noite"
}

// Fun√ß√£o para verificar se a farm√°cia est√° aberta
function isFarmaciaOpen() {
  const now = new Date();
  const dayOfWeek = now.getDay(); // 0 = Domingo, 1 = Segunda, ..., 6 = S√°bado
  const currentHour = now.getHours();
  const currentMinute = now.getMinutes();

  // A farm√°cia funciona de Segunda a S√°bado (1 a 6)
  if (dayOfWeek === 0) { // Domingo
    return false;
  }

  // Hor√°rios de funcionamento: "08:00 √†s 12:00 e 14:00 √†s 18:30"
  const parseTime = (timeStr) => {
    const [hour, minute] = timeStr.split(':').map(Number);
    return hour * 60 + minute;
  };

  const [period1, period2] = FARMACIA_CONFIG.horarios.segunda_sabado.split(' e ');
  const [start1Str, end1Str] = period1.split(' √†s ');
  const [start2Str, end2Str] = period2.split(' √†s ');

  const start1 = parseTime(start1Str);
  const end1 = parseTime(end1Str);
  const start2 = parseTime(start2Str);
  const end2 = parseTime(end2Str);
  const currentTimeInMinutes = currentHour * 60 + currentMinute;

  // Verifica se est√° dentro do primeiro per√≠odo
  const isOpenInPeriod1 = currentTimeInMinutes >= start1 && currentTimeInMinutes <= end1;
  // Verifica se est√° dentro do segundo per√≠odo
  const isOpenInPeriod2 = currentTimeInMinutes >= start2 && currentTimeInMinutes <= end2;

  return isOpenInPeriod1 || isOpenInPeriod2;
}


// Fun√ß√£o para salvar dados
function salvarDados() {
  try {
    fs.writeFileSync("usuarios.json", JSON.stringify(usuarios, null, 2))
    fs.writeFileSync("pedidos.json", JSON.stringify(pedidos, null, 2))
    fs.writeFileSync("conversas.json", JSON.stringify(conversas, null, 2))
    fs.writeFileSync("atendentesAtivos.json", JSON.stringify(atendentesAtivos, null, 2)) // Salvar atendentes ativos
  } catch (error) {
    console.error("Erro ao salvar dados:", error)
  }
}

// Fun√ß√£o para carregar dados
function carregarDados() {
  try {
    if (fs.existsSync("usuarios.json")) {
      usuarios = JSON.parse(fs.readFileSync("usuarios.json", "utf8"))
    }
    if (fs.existsSync("pedidos.json")) {
      pedidos = JSON.parse(fs.readFileSync("pedidos.json", "utf8"))
    }
    if (fs.existsSync("conversas.json")) {
      conversas = JSON.parse(fs.readFileSync("conversas.json", "utf8"))
    }
    if (fs.existsSync("atendentesAtivos.json")) { // Carregar atendentes ativos
      atendentesAtivos = JSON.parse(fs.readFileSync("atendentesAtivos.json", "utf8"))
    }
  } catch (error) {
    console.error("Erro ao carregar dados:", error)
  }
}

// Fun√ß√£o para inicializar conversa
function inicializarConversa(userId) {
  if (!conversas[userId]) {
    conversas[userId] = {
      estado: ESTADOS.INICIAL,
      dadosTemporarios: {},
      ultimaInteracao: new Date().toISOString(),
      atendenteRespondeuPrimeiraVez: false, // Flag para primeira resposta do atendente
      atendimentoStartTime: null, // NOVO: Timestamp para controle de timeout
      linkedPedidoId: null, // NOVO: Para vincular atendimento a um pedido espec√≠fico
    }
  }
  return conversas[userId]
}

// Fun√ß√£o para enviar menu principal
async function enviarMenuPrincipal(msg, nomeUsuario) {
  const chat = await msg.getChat()
  await delay(1000)
  await chat.sendStateTyping()
  await delay(2000)
  const menuText = `üè• *${FARMACIA_CONFIG.nome}* üè•

Ol√° ${nomeUsuario}! Como posso ajud√°-lo hoje?

*üìã MENU PRINCIPAL:*

*1Ô∏è‚É£* - üõí Fazer Pedido
*2Ô∏è‚É£* - üë§ Meus Dados / Cadastro
*3Ô∏è‚É£* - üïí Hor√°rios de Funcionamento
*4Ô∏è‚É£* - üöö Informa√ß√µes sobre Entrega
*5Ô∏è‚É£* - üìç Localiza√ß√£o da Farm√°cia
*6Ô∏è‚É£* - üë®‚Äç‚öïÔ∏è Falar com Atendente

Digite o n√∫mero da op√ß√£o desejada ou digite *menu* para ver este menu novamente.`
  await client.sendMessage(msg.from, menuText)
}

// Fun√ß√£o para enviar mensagem de comando n√£o entendido
async function enviarMensagemComandoNaoEntendido(msg) {
  await client.sendMessage(
    msg.from,
    "‚ùå Comando n√£o entendido. Digite *menu* para voltar ao menu principal."
  )
}

// Fun√ß√£o para processar cadastro
async function processarCadastro(msg, conversa) {
  const chat = await msg.getChat()
  const userId = msg.from // Este √© o ID do WhatsApp, que cont√©m o n√∫mero do telefone
  
  if (!conversa.dadosTemporarios.etapaCadastro) {
    conversa.dadosTemporarios.etapaCadastro = "nome"
    await delay(1000)
    await chat.sendStateTyping()
    await delay(1500)
    await client.sendMessage(msg.from, "üë§ *CADASTRO DE USU√ÅRIO*\n\nPor favor, digite seu *nome completo*:")
    return
  }

  switch (conversa.dadosTemporarios.etapaCadastro) {
    case "nome":
      if (msg.body.trim().length < 2) {
        await client.sendMessage(msg.from, "‚ö†Ô∏è Por favor, digite um nome v√°lido com pelo menos 2 caracteres:")
        return
      }
      conversa.dadosTemporarios.nome = msg.body
      conversa.dadosTemporarios.etapaCadastro = "confirmar_telefone"
      
      // Extrai o n√∫mero de telefone do userId (ex: "5511999998888@c.us" -> "5511999998888")
      const extractedPhoneRaw = userId.split('@')[0]; 
      const phone = extractedPhoneRaw.startsWith("55") ? extractedPhoneRaw.slice(2) : extractedPhoneRaw;
      const extractedPhone = `${phone.slice(0, 2)} ${phone.slice(2, 7)} ${phone.slice(7)}`;
      await delay(1000);
      await chat.sendStateTyping();
      await delay(1500);
      await client.sendMessage(msg.from, `üì± Este √© o seu n√∫mero de telefone para cadastro: *${extractedPhone}*?\n\nDigite *SIM* para confirmar ou digite o n√∫mero correto (com DDD):`);
      break

    case "confirmar_telefone":
      const input = msg.body.toUpperCase().trim();
      const currentPhone = userId.split('@')[0];

      if (input === "SIM") {
        conversa.dadosTemporarios.telefone = currentPhone;
        conversa.dadosTemporarios.etapaCadastro = "endereco"; // Move para o endere√ßo
        await delay(1000);
        await chat.sendStateTyping();
        await delay(1500);
        await client.sendMessage(msg.from, "üè† √ìtimo! Agora, por favor, digite seu *endere√ßo completo* com o m√°ximo de detalhes poss√≠vel (Rua, N√∫mero, Bairro, Complemento, Bairro, Cidade, CEP, Ponto de Refer√™ncia, se houver):");
      } else {
        // O usu√°rio forneceu um n√∫mero diferente ou entrada inv√°lida
        if (!/^\d{10,11}$/.test(msg.body.replace(/\D/g, ''))) {
          await client.sendMessage(msg.from, "‚ö†Ô∏è N√∫mero inv√°lido. Por favor, digite um telefone v√°lido (apenas n√∫meros, com DDD) ou *SIM* para confirmar o n√∫mero atual:");
          // Permanece na mesma etapa para pedir novamente
          // conversa.dadosTemporarios.etapaCadastro continua "confirmar_telefone"
        } else {
          conversa.dadosTemporarios.telefone = msg.body.replace(/\D/g, ''); // Salva o novo n√∫mero
          conversa.dadosTemporarios.etapaCadastro = "endereco"; // Move para o endere√ßo
          await delay(1000);
          await chat.sendStateTyping();
          await delay(1500);
          await client.sendMessage(msg.from, "üè† Telefone atualizado! Agora, por favor, digite seu *endere√ßo completo* com o m√°ximo de detalhes poss√≠vel (Rua, N√∫mero, Bairro, Complemento, Bairro, Cidade, CEP, Ponto de Refer√™ncia, se houver):");
        }
      }
      break

    case "endereco": // Esta etapa agora lida com o endere√ßo detalhado
      if (msg.body.trim().length < 15) { // Aumentado o comprimento m√≠nimo para endere√ßo detalhado
        await client.sendMessage(msg.from, "‚ö†Ô∏è Por favor, digite um endere√ßo mais completo, incluindo rua, n√∫mero, bairro, cidade e, se poss√≠vel, CEP e ponto de refer√™ncia:");
        return
      }
      conversa.dadosTemporarios.endereco = msg.body
      
      // Salvar usu√°rio
      usuarios[userId] = {
        nome: conversa.dadosTemporarios.nome,
        telefone: conversa.dadosTemporarios.telefone, // Usa o telefone confirmado/fornecido
        endereco: conversa.dadosTemporarios.endereco,
        dataCadastro: new Date().toISOString(),
        pedidos: [],
      }
      // Limpar dados tempor√°rios
      delete conversa.dadosTemporarios.etapaCadastro
      delete conversa.dadosTemporarios.nome
      delete conversa.dadosTemporarios.telefone
      delete conversa.dadosTemporarios.endereco
      conversa.estado = ESTADOS.MENU_PRINCIPAL
      salvarDados()
      await delay(1000)
      await chat.sendStateTyping()
      await delay(2000)
      await client.sendMessage(
        msg.from,
        "‚úÖ *Cadastro realizado com sucesso!*\n\nAgora voc√™ pode fazer pedidos e aproveitar todos os nossos servi√ßos.",
      )
      await delay(1000)
      await enviarMenuPrincipal(msg, usuarios[userId].nome.split(" ")[0])
      break

    default:
      await enviarMensagemComandoNaoEntendido(msg)
      break
  }
}

// Fun√ß√£o para processar pedidos
async function processarPedido(msg, conversa) {
  const chat = await msg.getChat()
  const userId = msg.from
  
  if (!usuarios[userId]) {
    conversa.estado = ESTADOS.CADASTRO
    await delay(1000)
    await chat.sendStateTyping()
    await delay(1500)
    await client.sendMessage(msg.from, "‚ö†Ô∏è Para fazer pedidos, primeiro preciso do seu cadastro.\n\nVamos come√ßar?")
    await processarCadastro(msg, conversa)
    return
  }

  if (!conversa.dadosTemporarios.etapaPedido) {
    conversa.dadosTemporarios.etapaPedido = "produtos"
    conversa.dadosTemporarios.produtos = []
    await delay(1000)
    await chat.sendStateTyping()
    await delay(2000)
    await client.sendMessage(
      msg.from,
      `üõí *FAZER PEDIDO*

Ol√° ${usuarios[userId].nome.split(" ")[0]}!

Digite os *medicamentos/produtos* que deseja, um por linha.

*Exemplo:*
Dipirona 500mg - 1 caixa
Vitamina C - 2 frascos
Protetor solar FPS 60

Quando terminar, digite *FINALIZAR*
Para remover o √∫ltimo item, digite *APAGAR ULTIMO*`,
    )
    return
  }

  // L√≥gica para apagar o √∫ltimo item
  if (msg.body.toUpperCase() === "APAGAR ULTIMO") {
    if (conversa.dadosTemporarios.produtos.length > 0) {
      const removedItem = conversa.dadosTemporarios.produtos.pop();
      await delay(500);
      const currentList = conversa.dadosTemporarios.produtos.length > 0 
        ? conversa.dadosTemporarios.produtos.map((p, i) => `${i + 1}. ${p}`).join("\n") 
        : "_Nenhum item ainda._";
      await client.sendMessage(
        msg.from,
        `üóëÔ∏è Item removido: *${removedItem}*\n\nLista atual de produtos:\n${currentList}\n\nContinue adicionando produtos ou digite *FINALIZAR* quando terminar. Para remover o √∫ltimo item, digite *APAGAR ULTIMO*.`
      );
    } else {
      await delay(500);
      await client.sendMessage(
        msg.from,
        "‚ö†Ô∏è N√£o h√° itens para remover no seu pedido. Adicione itens ou digite *FINALIZAR* para concluir."
      );
    }
    return; // Retorna para n√£o processar como um novo produto
  }

  // Handle FINALIZAR command first
  if (msg.body.toUpperCase() === "FINALIZAR") {
    if (conversa.dadosTemporarios.produtos.length === 0) {
      await client.sendMessage(
        msg.from,
        "‚ö†Ô∏è Voc√™ ainda n√£o adicionou nenhum produto. Adicione itens antes de finalizar ou digite *menu* para voltar.",
      )
      return
    }
    conversa.estado = ESTADOS.ENTREGA_RETIRADA
    await delay(1000)
    await chat.sendStateTyping()
    await delay(2000)
    const listaProdutos = conversa.dadosTemporarios.produtos
      .map((produto, index) => `${index + 1}. ${produto}`)
      .join("\n")
    await client.sendMessage(
      msg.from,
      `üìã *RESUMO DO PEDIDO:*

${listaProdutos}

üöö Como voc√™ prefere receber seu pedido?

*1* - üè† Entrega em casa (Taxa: ${FARMACIA_CONFIG.entrega.taxa})
*2* - üè™ Retirar na farm√°cia

Digite *1* ou *2*:`,
    )
    return
  }

  // If not FINALIZAR, it must be a product. Validate it.
  if (msg.body.trim().length < 2) {
    await client.sendMessage(
      msg.from,
      "‚ö†Ô∏è Por favor, digite um nome de produto v√°lido (pelo menos 2 caracteres) ou *FINALIZAR* para concluir o pedido."
    )
    return
  }

  // Adicionar produto √† lista
  conversa.dadosTemporarios.produtos.push(msg.body)
  await delay(500)
  await client.sendMessage(
    msg.from,
    `‚úÖ Produto adicionado: ${msg.body}\n\nContinue adicionando produtos ou digite *FINALIZAR* quando terminar. Para remover o √∫ltimo item, digite *APAGAR ULTIMO*.`,
  )
}

// Fun√ß√£o para processar entrega/retirada
async function processarEntregaRetirada(msg, conversa) {
  const chat = await msg.getChat()
  const userId = msg.from
  
  if (msg.body === "1") {
    conversa.dadosTemporarios.tipoEntrega = "entrega"
    conversa.estado = ESTADOS.FINALIZANDO
    await delay(1000)
    await chat.sendStateTyping()
    await delay(2000)
    await client.sendMessage(
      msg.from,
      `üöö *ENTREGA SELECIONADA*

üìç Endere√ßo: ${usuarios[userId].endereco}
üí∞ Taxa de entrega: ${FARMACIA_CONFIG.entrega.taxa}
‚è±Ô∏è Tempo estimado: ${FARMACIA_CONFIG.entrega.tempo}

O endere√ßo est√° correto? 
*1* - Sim, confirmar
*2* - N√£o, alterar endere√ßo`,
    )
  } else if (msg.body === "2") {
    conversa.dadosTemporarios.tipoEntrega = "retirada"
    conversa.estado = ESTADOS.FINALIZANDO
    await delay(1000)
    await chat.sendStateTyping()
    await delay(2000)
    await client.sendMessage(
      msg.from,
      `üè™ *RETIRADA NA FARM√ÅCIA*

üìç Endere√ßo: ${FARMACIA_CONFIG.endereco}
üìû Telefone: ${FARMACIA_CONFIG.telefone}

‚è∞ *Hor√°rios de funcionamento:*
Segunda a S√°bado: ${FARMACIA_CONFIG.horarios.segunda_sabado}

Digite *CONFIRMAR* para finalizar o pedido:`,
    )
  } else {
    await enviarMensagemComandoNaoEntendido(msg)
  }
}

// Fun√ß√£o para finalizar pedido
async function finalizarPedido(msg, conversa) {
  const chat = await msg.getChat()
  const userId = msg.from
  
  if (msg.body.toUpperCase() === "CONFIRMAR" || msg.body === "1") {
    // Gerar ID do pedido
    const pedidoId = Date.now().toString()
    // Salvar pedido
    pedidos[pedidoId] = {
      id: pedidoId,
      userId: userId, // Salva o userId para poder responder ao pedido
      produtos: conversa.dadosTemporarios.produtos,
      tipoEntrega: conversa.dadosTemporarios.tipoEntrega,
      endereco: usuarios[userId].endereco,
      status: "aguardando_atendente",
      dataHora: new Date().toISOString(),
      atendenteRespondeuPrimeiraVez: false, // Novo flag para primeira resposta do atendente para este pedido
    }
    // Adicionar pedido ao usu√°rio
    usuarios[userId].pedidos.push(pedidoId)
    // Limpar dados tempor√°rios
    delete conversa.dadosTemporarios.etapaPedido
    delete conversa.dadosTemporarios.produtos
    delete conversa.dadosTemporarios.tipoEntrega
    
    conversa.estado = ESTADOS.AGUARDANDO_ATENDENTE
    conversa.atendimentoStartTime = new Date().toISOString(); // NOVO: Inicia o timer de atendimento
    conversa.linkedPedidoId = pedidoId; // NOVO: Vincula a conversa ao pedido
    
    salvarDados()
    await delay(1000)
    await chat.sendStateTyping()
    await delay(3000)
    await client.sendMessage(
      msg.from,
      `‚úÖ *PEDIDO CONFIRMADO!*

üÜî N√∫mero do pedido: *${pedidoId}*

Seu pedido foi enviado para nossos atendentes e em breve voc√™ receber√° o or√ßamento e confirma√ß√£o.

‚è±Ô∏è Tempo estimado para resposta: 5-40 minutos

Obrigado por escolher a ${FARMACIA_CONFIG.nome}! üíö`,
    )
    // Notificar atendentes
    await notificarAtendentes(userId, usuarios[userId], "novo_pedido", pedidoId) // Passa o pedidoId
  } else if (msg.body === "2") {
    await delay(1000)
    await chat.sendStateTyping()
    await delay(1500)
    await client.sendMessage(msg.from, "üè† Digite o novo endere√ßo para entrega:")
    // Aguardar novo endere√ßo
    conversa.dadosTemporarios.aguardandoEndereco = true
  } else if (conversa.dadosTemporarios.aguardandoEndereco) {
    if (msg.body.trim().length < 15) { // Aumentado o comprimento m√≠nimo para endere√ßo detalhado
      await client.sendMessage(msg.from, "‚ö†Ô∏è Por favor, digite um endere√ßo mais completo, incluindo rua, n√∫mero, bairro, cidade e, se poss√≠vel, CEP e ponto de refer√™ncia:")
      return
    }
    usuarios[userId].endereco = msg.body
    delete conversa.dadosTemporarios.aguardandoEndereco
    salvarDados()
    await delay(1000)
    await chat.sendStateTyping()
    await delay(2000)
    await client.sendMessage(
      msg.from,
      `‚úÖ Endere√ßo atualizado!

üìç Novo endere√ßo: ${msg.body}
üí∞ Taxa de entrega: ${FARMACIA_CONFIG.entrega.taxa}
‚è±Ô∏è Tempo estimado: ${FARMACIA_CONFIG.entrega.tempo}

Digite *CONFIRMAR* para finalizar o pedido:`,
    )
  } else {
    await enviarMensagemComandoNaoEntendido(msg)
  }
}

// Fun√ß√£o para notificar atendentes
async function notificarAtendentes(userId, usuario, tipoNotificacao, conversationId = userId, originalMsg = null) {
  let mensagemAtendente = "";
  let instrucaoResposta = `*Para responder a este cliente, envie uma mensagem no formato:*\n\`\`\`\n${conversationId} Responder Sua mensagem aqui\n\`\`\`\n*Para abrir o atendimento e enviar mensagens diretas, use:*\n\`\`\`\n${conversationId} Abrir Atendimento\n\`\`\`\n*Para finalizar o atendimento, use:*\n\`\`\`\n${conversationId} Finalizar\n\`\`\``;
  let mediaToSend = null;

  if (tipoNotificacao === "novo_pedido") {
    const pedido = pedidos[conversationId]; // conversationId aqui √© o pedidoId
    const listaProdutos = pedido.produtos.map((produto, index) => `${index + 1}. ${produto}`).join("\n")
    mensagemAtendente = `üö® *NOVO PEDIDO - ${FARMACIA_CONFIG.nome}*

üÜî Pedido: *${pedido.id}*
üë§ Cliente: ${usuario.nome}
üì± Telefone: ${usuario.telefone}
üìç Endere√ßo: ${usuario.endereco}
üöö Tipo: ${pedido.tipoEntrega === "entrega" ? "Entrega" : "Retirada"}

üìã *Produtos solicitados:*
${listaProdutos}

‚è∞ Data/Hora: ${new Date(pedido.dataHora).toLocaleString("pt-BR")}

${instrucaoResposta}
Ex: \`${conversationId} Responder Ol√° ${usuario.nome.split(" ")[0]}, seu pedido est√° sendo preparado!\``;

  } else if (tipoNotificacao === "solicitacao_atendimento") {
    mensagemAtendente = `üë®‚Äç‚öïÔ∏è *SOLICITA√á√ÉO DE ATENDIMENTO HUMANO*

üë§ Cliente: ${usuario.nome}
üì± Contato: ${userId}
‚è∞ Data/Hora: ${new Date().toLocaleString("pt-BR")}

Cliente solicitou atendimento humano. Por favor, entre em contato.

${instrucaoResposta}
Ex: \`${conversationId} Responder Ol√° ${usuario.nome.split(" ")[0]}, como posso ajudar?\``;

  } else if (tipoNotificacao === "mensagem_usuario_atendimento" && originalMsg) {
    const messageType = originalMsg.type;
    const messageBody = originalMsg.body;
    const isMedia = originalMsg.hasMedia;

    mensagemAtendente = `üí¨ *MENSAGEM DO CLIENTE EM ATENDIMENTO*

üë§ Cliente: ${usuario.nome}
üì± Contato: ${userId}
Tipo: ${messageType}`;

    if (messageType === 'chat') {
      mensagemAtendente += `\nMensagem: ${messageBody}`;
    } else if (isMedia) {
      mensagemAtendente += `\n(Anexo: ${messageType})`;
      try {
        mediaToSend = await originalMsg.downloadMedia();
      } catch (error) {
        console.error("Erro ao baixar m√≠dia:", error);
        mensagemAtendente += "\n‚ö†Ô∏è Erro ao baixar m√≠dia.";
      }
    } else {
      mensagemAtendente += `\nMensagem: ${messageBody || '(Mensagem sem corpo)'}`;
    }

    mensagemAtendente += `\n\n${instrucaoResposta}`;
    mensagemAtendente += `\nEx: \`${conversationId} Responder Entendi sua d√∫vida, vou verificar.\``;
  }

  // Enviar para todos os atendentes
  for (const atendenteId of FARMACIA_CONFIG.atendentes) {
    try {
      if (mediaToSend) {
        await client.sendMessage(atendenteId, mediaToSend, { caption: mensagemAtendente });
      } else {
        await client.sendMessage(atendenteId, mensagemAtendente);
      }
    } catch (error) {
      console.error(`Erro ao notificar atendente ${atendenteId}:`, error);
    }
  }
}

// Fun√ß√£o para finalizar atendimento automaticamente
async function autoFinalizeSession(userId, reason) {
  const conversa = conversas[userId];
  if (!conversa) return;

  console.log(`Finalizando atendimento para ${userId} automaticamente devido a: ${reason}`);

  let clientName = usuarios[userId]?.nome?.split(" ")[0] || "Cliente";
  let messageToClient = `‚úÖ *Atendimento finalizado automaticamente!*`;

if (reason === 'inatividade (3 horas)') {
  messageToClient += `\n\nPara iniciar um novo atendimento, digite *menu*.`;
} else if (reason === 'fechamento da farm√°cia') {
  messageToClient += `\n\nSeu atendimento foi encerrado devido ao ${reason}.
\nNossa farm√°cia est√° fora do hor√°rio de funcionamento. Fique ligado nos nossos hor√°rios:\n*Segunda a S√°bado:* ${FARMACIA_CONFIG.horarios.segunda_sabado}\n\nAguardamos seu contato durante o nosso hor√°rio de atendimento! üòä`;
}

  try {
    await client.sendMessage(userId, messageToClient);
  } catch (error) {
    console.error(`Erro ao enviar mensagem de finaliza√ß√£o autom√°tica para ${userId}:`, error);
  }

  // Resetar estado do cliente
  conversa.estado = ESTADOS.MENU_PRINCIPAL;
  conversa.atendimentoStartTime = null;
  conversa.atendenteRespondeuPrimeiraVez = false;

  // Se houver um pedido vinculado, atualiza o status do pedido
  if (conversa.linkedPedidoId && pedidos[conversa.linkedPedidoId]) {
    pedidos[conversa.linkedPedidoId].status = "finalizado_automaticamente";
  }
  conversa.linkedPedidoId = null;

  // Remover o atendente ativo, se houver
  for (const attendantId in atendentesAtivos) {
    if (atendentesAtivos[attendantId] === userId || atendentesAtivos[attendantId] === conversa.linkedPedidoId) {
      delete atendentesAtivos[attendantId];
      try {
        await client.sendMessage(attendantId, `‚ÑπÔ∏è Atendimento com ${userId.split('@')[0]} (ID da conversa: ${atendentesAtivos[attendantId]}) foi finalizado automaticamente devido a ${reason}.`);
      } catch (error) {
        console.error(`Erro ao notificar atendente ${attendantId} sobre finaliza√ß√£o autom√°tica:`, error);
      }
    }
  }
  salvarDados();
}

// NOVO: Fun√ß√£o para verificar sess√µes inativas
async function checkInactiveSessions() {
  console.log("Verificando sess√µes inativas...");
  const currentTime = new Date();
  const isCurrentlyOpen = isFarmaciaOpen();

  for (const userId in conversas) {
    const conversa = conversas[userId];

    // Apenas verifica sess√µes que est√£o aguardando atendente ou em atendimento
    if (conversa.estado === ESTADOS.AGUARDANDO_ATENDENTE && conversa.atendimentoStartTime) {
      const startTime = new Date(conversa.atendimentoStartTime);
      const diffHours = (currentTime - startTime) / (1000 * 60 * 60);

      if (diffHours >= 3) {
        await autoFinalizeSession(userId, 'inatividade (3 horas)');
      }
    }
  }
  salvarDados(); // Salva ap√≥s a verifica√ß√£o
}


// Fun√ß√£o principal para processar mensagens
client.on("message", async (msg) => {
  // S√≥ responder mensagens de contatos individuais (n√£o grupos)
  if (!msg.from.endsWith("@c.us")) {
    return
  }

  const userId = msg.from
  const conversa = inicializarConversa(userId)
  const contact = await msg.getContact()
  const nomeContato = contact.pushname || "Cliente"

  // Atualizar √∫ltima intera√ß√£o
  conversa.ultimaInteracao = new Date().toISOString()

  // --- L√≥gica para atendentes responderem aos usu√°rios ---
  if (FARMACIA_CONFIG.atendentes.includes(userId)) {
    // Obter o nome do atendente do mapeamento ou fallback para pushname/gen√©rico
    const attendantName = FARMACIA_CONFIG.nomesAtendentes[userId] || (await msg.getContact()).pushname || "Atendente";

    // 1. Comando para FINALIZAR atendimento: [ID_DA_CONVERSA] Finalizar
    const finalizeMatch = msg.body.match(/^(?<conversationId>\S+)\s+Finalizar\s*$/i);
    if (finalizeMatch && finalizeMatch.groups) {
      const conversationId = finalizeMatch.groups.conversationId;
      let targetUserId = null;
      let clientName = "Cliente";

      if (pedidos[conversationId] && pedidos[conversationId].userId) {
        targetUserId = pedidos[conversationId].userId;
        clientName = usuarios[targetUserId]?.nome?.split(" ")[0] || "Cliente";
        pedidos[conversationId].atendenteRespondeuPrimeiraVez = false; // Reset flag
        pedidos[conversationId].status = "finalizado_atendimento";
      } else if (conversas[conversationId]) {
        targetUserId = conversationId;
        clientName = usuarios[targetUserId]?.nome?.split(" ")[0] || "Cliente";
        conversas[conversationId].atendenteRespondeuPrimeiraVez = false; // Reset flag
      }

      if (targetUserId) {
        try {
          await client.sendMessage(targetUserId, `‚úÖ *Atendimento finalizado!*

Obrigado por entrar em contato, ${clientName}. Se precisar de algo mais, digite *menu* para voltar ao menu principal.`);
          conversas[targetUserId].estado = ESTADOS.MENU_PRINCIPAL; // Retorna o cliente ao menu principal
          conversas[targetUserId].atendimentoStartTime = null; // NOVO: Limpa o timer
          conversas[targetUserId].linkedPedidoId = null; // NOVO: Limpa o link do pedido
          salvarDados();

          delete atendentesAtivos[userId]; // Remove a conversa ativa para este atendente
          salvarDados();

          await client.sendMessage(userId, `‚úÖ Atendimento com ${targetUserId.split('@')[0]} (ID da conversa: ${atendentesAtivos[userId]}) foi finalizado com sucesso.`);
        } catch (error) {
          console.error(`Erro ao finalizar atendimento para ${targetUserId}:`, error);
          await client.sendMessage(userId, `‚ùå Erro ao finalizar atendimento para ${targetUserId.split('@')[0]} (ID da conversa: ${conversationId}).`);
        }
      } else {
        await client.sendMessage(userId, `‚ö†Ô∏è ID da conversa (${conversationId}) n√£o encontrado ou inv√°lido para finalizar.`);
      }
      return;
    }

    // 2. Comando para ABRIR atendimento: [ID_DA_CONVERSA] Abrir Atendimento
    const openMatch = msg.body.match(/^(?<conversationId>\S+)\s+Abrir Atendimento\s*$/i);
    if (openMatch && openMatch.groups) {
      const conversationId = openMatch.groups.conversationId;
      let targetUserId = null;

      if (pedidos[conversationId] && pedidos[conversationId].userId) {
        targetUserId = pedidos[conversationId].userId;
        pedidos[conversationId].status = "em_atendimento"; //  Atualiza status do pedido
      } else if (conversas[conversationId]) {
        targetUserId = conversationId;
      }

      if (targetUserId) {
        atendentesAtivos[userId] = conversationId; // Define a conversa ativa para este atendente
        conversas[targetUserId].atendimentoStartTime = new Date().toISOString(); // Reseta o timer ao abrir atendimento
        salvarDados();
        await client.sendMessage(userId, `‚úÖ Atendimento para ${targetUserId.split('@')[0]} (N√∫mero da conversa: ${conversationId}) *ativado*. Agora voc√™ pode enviar mensagens diretamente.`);
      } else {
        await client.sendMessage(userId, `‚ö†Ô∏è N√∫mero da conversa (${conversationId}) n√£o encontrado ou inv√°lido para abrir atendimento.`);
      }
      return;
    }

    // 3. Comando para RESPONDER e iniciar/continuar atendimento: [ID_DA_CONVERSA] Responder Sua mensagem aqui
    const respondMatch = msg.body.match(/^(?<conversationId>\S+)\s+Responder\s+(?<message>.*)/i);
    let conversationIdToProcess = null;
    let messageContentToProcess = null;

    if (respondMatch && respondMatch.groups) {
      // Explicit command: [ID] Responder [MSG]
      conversationIdToProcess = respondMatch.groups.conversationId;
      messageContentToProcess = respondMatch.groups.message;
      atendentesAtivos[userId] = conversationIdToProcess; // Define esta como a conversa ativa do atendente
      salvarDados();
    } else if (atendentesAtivos[userId]) {
      // No explicit command, but an active conversation exists
      conversationIdToProcess = atendentesAtivos[userId];
      messageContentToProcess = msg.body;
    }

    if (conversationIdToProcess) {
      let targetUserId = null;
      let clientName = "Cliente";
      let respondedFirstTimeFlag = false;

      if (pedidos[conversationIdToProcess] && pedidos[conversationIdToProcess].userId) {
        targetUserId = pedidos[conversationIdToProcess].userId;
        clientName = usuarios[targetUserId]?.nome?.split(" ")[0] || "Cliente";
        respondedFirstTimeFlag = pedidos[conversationIdToProcess].atendenteRespondeuPrimeiraVez;
        pedidos[conversationIdToProcess].status = "em_atendimento"; // NOVO: Atualiza status do pedido
      } else if (conversas[conversationIdToProcess]) {
        targetUserId = conversationIdToProcess;
        clientName = usuarios[targetUserId]?.nome?.split(" ")[0] || "Cliente";
        respondedFirstTimeFlag = conversas[conversationIdToProcess].atendenteRespondeuPrimeiraVez;
      }

      if (targetUserId) {
        let finalMessageContent = messageContentToProcess;

        if (!respondedFirstTimeFlag) {
          finalMessageContent = `Ol√° ${clientName}, quem fala √© o(a) *${attendantName}*.\n\n${messageContentToProcess}`;
          if (pedidos[conversationIdToProcess]) {
            pedidos[conversationIdToProcess].atendenteRespondeuPrimeiraVez = true;
          } else if (conversas[conversationIdToProcess]) {
            conversas[conversationIdToProcess].atendenteRespondeuPrimeiraVez = true;
          }
          salvarDados();
        }
        
        //  Reseta o timer de atendimento a cada resposta do atendente
        conversas[targetUserId].atendimentoStartTime = new Date().toISOString();
        salvarDados();

        try {
          if (msg.hasMedia) {
            const media = await msg.downloadMedia();
            await client.sendMessage(targetUserId, media, { caption: `üë®‚Äç‚öïÔ∏è *${attendantName}:* ${finalMessageContent}` });
          } else {
            await client.sendMessage(targetUserId, `üë®‚Äç‚öïÔ∏è *${attendantName}:* ${finalMessageContent}`);
          }
          
        } catch (error) {
          console.error(`Erro ao enviar mensagem do atendente para ${targetUserId}:`, error);
          await client.sendMessage(userId, `‚ùå Erro ao enviar mensagem para ${targetUserId.split('@')[0]} (ID da conversa: ${conversationIdToProcess}).`);
        }
      } else {
        await client.sendMessage(userId, `‚ö†Ô∏è ID da conversa ativa (${conversationIdToProcess}) n√£o encontrado ou inv√°lido.`);
      }
      return;
    }

    // Fallback: Se nenhum comando espec√≠fico foi usado e n√£o h√° conversa ativa
    await client.sendMessage(userId, "‚ö†Ô∏è Comando de atendente inv√°lido ou nenhuma conversa ativa. Use: `[ID_DA_CONVERSA] Abrir Atendimento`, `[ID_DA_CONVERSA] Responder Sua mensagem aqui` (para iniciar e responder), ou `[ID_DA_CONVERSA] Finalizar`.");
    return;
  }
  // --- Fim da l√≥gica para atendentes ---

  // Verificar hor√°rio de funcionamento para clientes (exceto atendentes)
  if (!isFarmaciaOpen()) {
    await client.sendMessage(
      msg.from,
      `‚è∞ Ol√°! A *${FARMACIA_CONFIG.nome}* est√° fora do hor√°rio de funcionamento no momento.

Fique ligado nos nossos hor√°rios:
*Segunda a S√°bado:* ${FARMACIA_CONFIG.horarios.segunda_sabado}

Aguardamos seu contato durante o nosso hor√°rio de atendimento! üòä`
    );
    return; // Interrompe o processamento da mensagem se a farm√°cia estiver fechada
  }


  // Comandos especiais
  if (msg.body.match(/(menu|Menu|in√≠cio|inicio)/i)) {
    // Impedir que o usu√°rio volte ao menu se estiver em atendimento ativo
    if (conversa.estado === ESTADOS.AGUARDANDO_ATENDENTE) {
      await client.sendMessage(
        msg.from,
        "üí¨ Voc√™ est√° em um atendimento ativo. Por favor, aguarde a resposta do atendente ou pe√ßa para ele finalizar o atendimento para voltar ao menu principal."
      );
      return; // Impede que o fluxo continue para o menu
    }
    conversa.estado = ESTADOS.MENU_PRINCIPAL
    await enviarMenuPrincipal(msg, nomeContato.split(" ")[0])
    return
  }

  // Mensagem inicial ou sauda√ß√µes
  if (
    msg.body.match(/(oi|ol√°|ola|bom dia|boa tarde|boa noite|dia|tarde|boa noite)/i) &&
    conversa.estado === ESTADOS.INICIAL
  ) {
    const chat = await msg.getChat()
    const saudacao = obterSaudacao()
    await delay(2000)
    await chat.sendStateTyping()
    await delay(3000)
    await client.sendMessage(
      msg.from,
      `${saudacao}! üòä

Seja bem-vindo(a) √† *${FARMACIA_CONFIG.nome}*! Eu sou o assistente virtual e estou aqui para ajud√°-lo com:

‚Ä¢ üõí Pedidos de medicamentos
‚Ä¢ üìã Cadastro e informa√ß√µes
‚Ä¢ üöö Entregas e retiradas
‚Ä¢ ‚ùì D√∫vidas em geral

Vamos come√ßar?`,
    )
    conversa.estado = ESTADOS.MENU_PRINCIPAL
    await delay(3000) // Mant√©m o delay para UX
    await enviarMenuPrincipal(msg, nomeContato.split(" ")[0]) // Envia o menu principal
    return // Garante que a execu√ß√£o pare aqui
  }

  // Processar baseado no estado atual
  switch (conversa.estado) {
    case ESTADOS.MENU_PRINCIPAL:
      await processarMenuPrincipal(msg, conversa, nomeContato)
      break
    case ESTADOS.CADASTRO:
      await processarCadastro(msg, conversa)
      break
    case ESTADOS.PEDIDO:
      await processarPedido(msg, conversa)
      break
    case ESTADOS.ENTREGA_RETIRADA:
      await processarEntregaRetirada(msg, conversa)
      break
    case ESTADOS.FINALIZANDO:
      await finalizarPedido(msg, conversa)
      break
    case ESTADOS.AGUARDANDO_ATENDENTE:
      // Se o usu√°rio est√° aguardando atendente, encaminha a mensagem para o atendente
      const usuarioAtual = usuarios[userId] || { nome: nomeContato, telefone: userId.split('@')[0] };
      // Passa o originalMsg para que a fun√ß√£o possa encaminhar m√≠dias (incluindo figurinhas)
      await notificarAtendentes(userId, usuarioAtual, "mensagem_usuario_atendimento", userId, msg); 
      break;
    case ESTADOS.VISUALIZANDO_INFO:
      // Se estiver visualizando info e n√£o digitou 'menu', √© um comando n√£o entendido
      await enviarMensagemComandoNaoEntendido(msg)
      break
    default:
      // Fallback para estados inesperados, retorna ao menu principal
      conversa.estado = ESTADOS.MENU_PRINCIPAL
      await enviarMenuPrincipal(msg, nomeContato.split(" ")[0])
      break
  }

  // Salvar dados ap√≥s cada intera√ß√£o
  salvarDados()
})

// Fun√ß√£o para processar menu principal
async function processarMenuPrincipal(msg, conversa, nomeContato) {
  const chat = await msg.getChat()
  const userId = msg.from
  
  switch (msg.body) {
    case "1":
      conversa.estado = ESTADOS.PEDIDO
      await processarPedido(msg, conversa)
      break
    case "2":
      if (usuarios[userId]) {
        await delay(1000)
        await chat.sendStateTyping()
        await delay(2000)
        await client.sendMessage(
          msg.from,
          `üë§ *SEUS DADOS CADASTRADOS:*

üìù Nome: ${usuarios[userId].nome}
üì± Telefone: ${usuarios[userId].telefone}
üè† Endere√ßo: ${usuarios[userId].endereco}
üìÖ Cadastrado em: ${new Date(usuarios[userId].dataCadastro).toLocaleDateString("pt-BR")}
üõí Total de pedidos: ${usuarios[userId].pedidos.length}

Para alterar algum dado, digite *atualizar* ou *menu* para voltar.`,
        )
      } else {
        conversa.estado = ESTADOS.CADASTRO
        await processarCadastro(msg, conversa)
      }
      break
    case "3":
      await delay(1000)
      await chat.sendStateTyping()
      await delay(2000)
      await client.sendMessage(
        msg.from,
        `üïí *HOR√ÅRIOS DE FUNCIONAMENTO*

üìç ${FARMACIA_CONFIG.endereco}

‚è∞ *Hor√°rios:*
üîπ Segunda a S√°bado: ${FARMACIA_CONFIG.horarios.segunda_sabado}

üìû Telefone: ${FARMACIA_CONFIG.telefone}

Digite *menu* para voltar ao menu principal.`,
      )
      conversa.estado = ESTADOS.VISUALIZANDO_INFO // Define o estado para visualizando info
      break
    case "4":
      await delay(1000)
      await chat.sendStateTyping()
      await delay(2000)
      await client.sendMessage(
        msg.from,
        `üöö *INFORMA√á√ïES SOBRE ENTREGA*

üí∞ Taxa de entrega: ${FARMACIA_CONFIG.entrega.taxa}
‚è±Ô∏è Tempo estimado: ${FARMACIA_CONFIG.entrega.tempo}
üìç Raio de entrega: ${FARMACIA_CONFIG.entrega.raio}

üè™ *Retirada na farm√°cia:*
üìç ${FARMACIA_CONFIG.endereco}
üí∞ Sem taxa adicional
‚è±Ô∏è Dispon√≠vel nos hor√°rios de funcionamento

Digite *menu* para voltar ao menu principal.`,
      )
      conversa.estado = ESTADOS.VISUALIZANDO_INFO // Define o estado para visualizando info
      break
    case "5":
      await delay(1000)
      await chat.sendStateTyping()
      await delay(2000)
      await client.sendMessage(
        msg.from,
        `üìç *LOCALIZA√á√ÉO DA FARM√ÅCIA*

üè• ${FARMACIA_CONFIG.nome}
üìç ${FARMACIA_CONFIG.endereco}
üìû ${FARMACIA_CONFIG.telefone}

üöó *Como chegar:*
‚Ä¢ Ao lado do centro da cidade

üïí *Hor√°rios:*
Segunda a S√°bado: ${FARMACIA_CONFIG.horarios.segunda_sabado}

Digite *menu* para voltar ao menu principal.`,
      )
      conversa.estado = ESTADOS.VISUALIZANDO_INFO // Define o estado para visualizando info
      break
    case "6":
      await delay(1000)
      await chat.sendStateTyping()
      await delay(2000)
      await client.sendMessage(
        msg.from,
        `üë®‚Äç‚öïÔ∏è *FALAR COM ATENDENTE*

Voc√™ ser√° conectado com um de nossos atendentes em breve!

‚è±Ô∏è Hor√°rio de atendimento humano:
Segunda a S√°bado: 08:00 √†s 12:00 e 14:00 √†s 18:30

Aguarde que em instantes um atendente entrar√° em contato com voc√™.

Digite *menu* se precisar voltar ao menu principal.`,
      )
      conversa.estado = ESTADOS.AGUARDANDO_ATENDENTE; // Muda o estado do usu√°rio para aguardando atendente
      conversa.atendimentoStartTime = new Date().toISOString(); // NOVO: Inicia o timer de atendimento
      conversa.linkedPedidoId = null; // NOVO: N√£o h√° pedido vinculado diretamente
      // Notificar atendentes sobre solicita√ß√£o
      const usuarioSolicitante = usuarios[userId] || { nome: nomeContato, telefone: userId.split('@')[0] };
      // Passa o userId como conversationId para o atendente saber para quem responder
      await notificarAtendentes(userId, usuarioSolicitante, "solicitacao_atendimento", userId); 
      break
    default:
      // Mensagem de erro espec√≠fica do menu principal
      await delay(1000)
      await client.sendMessage(
        msg.from,
        "‚ö†Ô∏è Op√ß√£o inv√°lida. Por favor, digite um n√∫mero de 1 a 6 ou *menu* para ver as op√ß√µes novamente.",
      )
      await delay(2000)
      await enviarMenuPrincipal(msg, nomeContato.split(" ")[0])
      break
  }
}

// Salvar dados a cada 5 minutos
setInterval(salvarDados, 5 * 60 * 1000)

// Salvar dados ao encerrar o processo
process.on("SIGINT", () => {
  console.log("\nüîÑ Salvando dados antes de encerrar...")
  salvarDados()
  console.log("‚úÖ Dados salvos. Encerrando bot...")
  process.exit(0)
})

console.log("üöÄ Iniciando Bot da Farm√°cia Rocha...")
